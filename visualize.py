import matplotlib.pyplot as plt
import networkx as nx
from networkx.drawing.nx_pydot import graphviz_layout


def parse_tree_txt(file_path):
    """
    Parses a tree structure from a .txt file generated by RenderTree.
    Returns a list of tuples: (indent_level, name, code)
    """
    tree = []
    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            stripped = line.rstrip()
            if not stripped:
                continue
            parts = stripped.split("\t")
            if len(parts) < 2:
                continue
            name_part = parts[0].strip()
            code_part = parts[1].strip().strip("()")
            indent_level = name_part.count("│") + name_part.count("    ") + name_part.count("─") // 2
            clean_name = name_part.strip("├└─│ ")
            tree.append((indent_level, clean_name, code_part))
    return tree


def build_graph_from_tree(tree):
    """
    Builds a directed graph from parsed tree structure.
    """
    G = nx.DiGraph()
    level_stack = {}

    for level, name, code in tree:
        node_label = f"{name}\n({code})"
        G.add_node(node_label)
        level_stack[level] = node_label
        if level > 0 and (level - 1) in level_stack:
            G.add_edge(level_stack[level - 1], node_label)
    return G


def visualize_tree_comparison(file1, file2, output_path="tree_comparison.png", max_nodes=1000):
    """
    Visualizes two trees side by side from .txt files.
    Limits nodes per tree to max_nodes for readability.
    """
    tree1 = parse_tree_txt(file1)[:max_nodes]
    tree2 = parse_tree_txt(file2)[:max_nodes]

    graph1 = build_graph_from_tree(tree1)
    graph2 = build_graph_from_tree(tree2)

    fig, axes = plt.subplots(1, 2, figsize=(24, 16), dpi=150)

    try:
        pos1 = graphviz_layout(graph1, prog="dot")
    except Exception:
        pos1 = nx.spring_layout(graph1, seed=42)

    try:
        pos2 = graphviz_layout(graph2, prog="dot")
    except Exception:
        pos2 = nx.spring_layout(graph2, seed=42)

    nx.draw(graph1, pos1, with_labels=True, node_size=300, node_color="skyblue",
            font_size=6, ax=axes[0], arrows=False)
    axes[0].set_title(f"Tree 1: {file1} (showing {len(graph1)} nodes)")

    nx.draw(graph2, pos2, with_labels=True, node_size=300, node_color="lightgreen",
            font_size=6, ax=axes[1], arrows=False)
    axes[1].set_title(f"Tree 2: {file2} (showing {len(graph2)} nodes)")

    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()
    print(f"Tree comparison saved to {output_path}")
